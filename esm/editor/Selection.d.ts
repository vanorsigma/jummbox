import { SongDocument } from "./SongDocument";
import { ChangeGroup } from "./Change";
export declare class Selection {
    private _doc;
    boxSelectionX0: number;
    boxSelectionY0: number;
    boxSelectionX1: number;
    boxSelectionY1: number;
    digits: string;
    instrumentDigits: string;
    patternSelectionStart: number;
    patternSelectionEnd: number;
    patternSelectionActive: boolean;
    private _changeTranspose;
    private _changeTrack;
    private _changeInstrument;
    private _changeReorder;
    constructor(_doc: SongDocument);
    toJSON(): {
        x0: number;
        x1: number;
        y0: number;
        y1: number;
        start: number;
        end: number;
    };
    fromJSON(json: {
        x0: number;
        x1: number;
        y0: number;
        y1: number;
        start: number;
        end: number;
    }): void;
    selectionUpdated(): void;
    get boxSelectionBar(): number;
    get boxSelectionChannel(): number;
    get boxSelectionWidth(): number;
    get boxSelectionHeight(): number;
    get boxSelectionActive(): boolean;
    scrollToSelectedPattern(): void;
    scrollToEndOfSelection(): void;
    setChannelBar(channelIndex: number, bar: number): void;
    setPattern(pattern: number): void;
    nextDigit(digit: string, forInstrument: boolean, forRhythms: boolean): void;
    setModChannel(mod: number, index: number): void;
    setModInstrument(mod: number, instrument: number): void;
    setModSetting(mod: number, text: string): void;
    setModFilter(mod: number, type: number): void;
    insertBars(): void;
    insertChannel(): void;
    deleteBars(): void;
    deleteChannel(): void;
    private _eachSelectedChannel;
    private _eachSelectedBar;
    private _eachSelectedPattern;
    private _parseCopiedInstrumentArray;
    private _patternIndexIsUnused;
    copy(): void;
    pasteNotes(): void;
    erasePatternInBar(group: ChangeGroup, channelIndex: number, bar: number): void;
    pasteNumbers(): void;
    selectAll(): void;
    selectChannel(): void;
    duplicatePatterns(): void;
    muteChannels(allChannels: boolean): void;
    soloChannels(invert: boolean): void;
    forceRhythm(): void;
    forceScale(): void;
    setTrackSelection(newX0: number, newX1: number, newY0: number, newY1: number): void;
    transpose(upward: boolean, octave: boolean): void;
    swapChannels(offset: number): void;
    selectInstrument(instrument: number): void;
    resetBoxSelection(): void;
}
