import { Prompt } from "./Prompt";
import { SongDocument } from "./SongDocument";
import { SongEditor } from "./SongEditor";
export declare class LimiterCanvas {
    private readonly _editorWidth;
    private readonly _editorHeight;
    private readonly _fill;
    private readonly _ticks;
    private readonly _subticks;
    private readonly _boostCurve;
    private readonly _boostDot;
    private readonly _midCurve;
    private readonly _limitCurve;
    private readonly _limitDot;
    private readonly _label0;
    private readonly _label1;
    private readonly _label2;
    private readonly _inLabel;
    private readonly _outLabel;
    private readonly _xAxisLabel;
    private readonly _yAxisLabel;
    private readonly _inVolumeBg;
    private readonly _outVolumeBg;
    private readonly _inVolumeBar;
    private readonly _inVolumeCap;
    private readonly _outVolumeBar;
    private readonly _outVolumeCap;
    private readonly _stop1;
    private readonly _stop2;
    private readonly _stop3;
    private readonly _gradient;
    private readonly _defs;
    private readonly _svg;
    readonly container: HTMLElement;
    private _limiterPrompt;
    constructor(lim: LimiterPrompt);
    animateVolume(inVolumeCap: number, historicInCap: number, outVolumeCap: number, historicOutCap: number): void;
    render(): void;
}
export declare class LimiterPrompt implements Prompt {
    private _doc;
    private _songEditor;
    private limiterCanvas;
    readonly _playButton: HTMLButtonElement;
    readonly limitDecaySlider: HTMLInputElement;
    readonly limitRiseSlider: HTMLInputElement;
    readonly compressionThresholdSlider: HTMLInputElement;
    readonly limitThresholdSlider: HTMLInputElement;
    readonly compressionRatioSlider: HTMLInputElement;
    readonly limitRatioSlider: HTMLInputElement;
    readonly masterGainSlider: HTMLInputElement;
    private startingLimitDecay;
    private startingLimitRise;
    private startingCompressionThreshold;
    private startingLimitThreshold;
    private startingCompressionRatio;
    private startingLimitRatio;
    private startingMasterGain;
    private inVolumeHistoricTimer;
    private inVolumeHistoricCap;
    private outVolumeHistoricTimer;
    private outVolumeHistoricCap;
    private readonly _cancelButton;
    private readonly _okayButton;
    private readonly _resetButton;
    readonly container: HTMLDivElement;
    constructor(_doc: SongDocument, _songEditor: SongEditor);
    private _volumeUpdate;
    private _togglePlay;
    updatePlayButton(): void;
    private _whenInput;
    private _whenInputFavorLimitThreshold;
    private _close;
    cleanUp: () => void;
    whenKeyPressed: (event: KeyboardEvent) => void;
    private _resetDefaults;
    private _updateLimiter;
    private _saveChanges;
}
