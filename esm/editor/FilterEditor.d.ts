import { FilterSettings } from "../synth/synth";
import { SongDocument } from "./SongDocument";
export declare class FilterEditor {
    private _doc;
    private _editorWidth;
    private _editorHeight;
    private readonly _responsePath;
    private _indicators;
    private _subFilters;
    private _writingMods;
    private readonly _controlPointPath;
    private readonly _dottedLinePath;
    private readonly _highlight;
    private readonly _svg;
    private selfUndoSettings;
    private selfUndoHistoryPos;
    private readonly _label;
    coordText: HTMLElement | null;
    readonly container: HTMLElement;
    private _pointRadius;
    private _useNoteFilter;
    private _larger;
    private _touchMode;
    private _mouseX;
    private _mouseY;
    private _mouseOver;
    private _mouseDown;
    private _mouseDragging;
    private _addingPoint;
    private _deletingPoint;
    private _addedType;
    private _selectedIndex;
    private _freqStart;
    private _gainStart;
    private _dragChange;
    private _subfilterIndex;
    private _filterSettings;
    private _useFilterSettings;
    private _renderedSelectedIndex;
    private _renderedPointCount;
    private _renderedPointTypes;
    private _renderedPointFreqs;
    private _renderedPointGains;
    constructor(_doc: SongDocument, useNoteFilter?: boolean, larger?: boolean);
    private _whenKeyPressed;
    private _xToFreq;
    private _freqToX;
    private _yToGain;
    private _gainToY;
    private _whenMouseOver;
    private _whenMouseOut;
    private _whenMousePressed;
    private _whenTouchPressed;
    private _whenMouseMoved;
    private _whenTouchMoved;
    private _whenCursorPressed;
    private _updateCursor;
    private _whenCursorMoved;
    private _whenCursorReleased;
    private _findNearestFreqSlot;
    private static _circlePath;
    private _updatePath;
    swapToSettings(settings: FilterSettings, useHistory?: boolean): void;
    saveSettings(): void;
    undo(): number;
    redo(): number;
    resetToInitial(): void;
    swapSubfilterIndices(newIndex: number): void;
    swapToSubfilter(oldIndex: number, newIndex: number, useHistory?: boolean): void;
    private _getTargetFilterSettings;
    render(activeMods?: boolean, forceModRender?: boolean): void;
}
