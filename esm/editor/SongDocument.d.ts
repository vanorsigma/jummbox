import { Pattern, Song, Synth } from "../synth/synth";
import { SongPerformance } from "./SongPerformance";
import { Selection } from "./Selection";
import { Preferences } from "./Preferences";
import { Change } from "./Change";
import { ChangeNotifier } from "./ChangeNotifier";
import { ChangeHoldingModRecording } from "./changes";
export declare class SongDocument {
    song: Song;
    synth: Synth;
    performance: SongPerformance;
    readonly notifier: ChangeNotifier;
    readonly selection: Selection;
    readonly prefs: Preferences;
    channel: number;
    muteEditorChannel: number;
    bar: number;
    recalcChannelNames: boolean;
    recentPatternInstruments: number[][];
    viewedInstrument: number[];
    recordingModulators: boolean;
    continuingModRecordingChange: ChangeHoldingModRecording | null;
    trackVisibleBars: number;
    trackVisibleChannels: number;
    barScrollPos: number;
    channelScrollPos: number;
    prompt: string | null;
    addedEffect: boolean;
    addedEnvelope: boolean;
    currentPatternIsDirty: boolean;
    modRecordingHandler: () => void;
    private static readonly _maximumUndoHistory;
    private _recovery;
    private _recoveryUid;
    private _recentChange;
    private _sequenceNumber;
    private _lastSequenceNumber;
    private _stateShouldBePushed;
    private _recordedNewSong;
    _waitingToUpdateState: boolean;
    constructor();
    toggleDisplayBrowserUrl(): void;
    private _getHistoryState;
    private _getHash;
    private _replaceState;
    private _pushState;
    hasRedoHistory(): boolean;
    private _forward;
    private _back;
    private _whenHistoryStateChanged;
    private _cleanDocument;
    private _cleanDocumentIfNotRecordingMods;
    private _validateDocState;
    private _updateHistoryState;
    record(change: Change, replace?: boolean, newSong?: boolean): void;
    private _resetSongRecoveryUid;
    openPrompt(prompt: string): void;
    undo(): void;
    redo(): void;
    setProspectiveChange(change: Change | null): void;
    forgetLastChange(): void;
    checkLastChange(): Change | null;
    lastChangeWas(change: Change | null): boolean;
    goBackToStart(): void;
    setVolume(val: number): void;
    private _calcVolume;
    getCurrentPattern(barOffset?: number): Pattern | null;
    getCurrentInstrument(barOffset?: number): number;
    getMobileLayout(): boolean;
    getBarWidth(): number;
    getChannelHeight(): number;
    getFullScreen(): boolean;
    getVisibleOctaveCount(): number;
    getVisiblePitchCount(): number;
    getBaseVisibleOctave(channel: number): number;
}
