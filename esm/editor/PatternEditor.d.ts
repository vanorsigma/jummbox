import { SongDocument } from "./SongDocument";
import { SongEditor } from "./SongEditor";
export declare class PatternEditor {
    private _doc;
    private _interactive;
    private _barOffset;
    controlMode: boolean;
    shiftMode: boolean;
    private readonly _svgNoteBackground;
    private readonly _svgDrumBackground;
    private readonly _svgModBackground;
    private readonly _svgBackground;
    private _svgNoteContainer;
    private readonly _svgPlayhead;
    private readonly _selectionRect;
    private readonly _svgPreview;
    modDragValueLabel: HTMLDivElement;
    private readonly _svg;
    readonly container: HTMLDivElement;
    private readonly _defaultModBorder;
    private readonly _backgroundPitchRows;
    private readonly _backgroundDrumRow;
    private readonly _backgroundModRow;
    private _editorWidth;
    private _modDragValueLabelLeft;
    private _modDragValueLabelTop;
    private _modDragValueLabelWidth;
    editingModLabel: boolean;
    private _modDragStartValue;
    private _modDragPin;
    private _modDragNote;
    private _modDragSetting;
    private _modDragLowerBound;
    private _modDragUpperBound;
    private _editorHeight;
    private _partWidth;
    private _pitchHeight;
    private _pitchBorder;
    private _pitchCount;
    private _mouseX;
    private _mouseY;
    private _mouseDown;
    private _mouseOver;
    private _mouseDragging;
    private _mouseHorizontal;
    private _usingTouch;
    private _copiedPinChannels;
    private _copiedPins;
    private _mouseXStart;
    private _mouseYStart;
    private _touchTime;
    private _shiftHeld;
    private _dragConfirmed;
    private _draggingStartOfSelection;
    private _draggingEndOfSelection;
    private _draggingSelectionContents;
    private _dragTime;
    private _dragPitch;
    private _dragSize;
    private _dragVisible;
    private _dragChange;
    private _changePatternSelection;
    private _lastChangeWasPatternSelection;
    private _cursor;
    private _stashCursorPinVols;
    private _pattern;
    private _playheadX;
    private _octaveOffset;
    private _renderedWidth;
    private _renderedHeight;
    private _renderedBeatWidth;
    private _renderedPitchHeight;
    private _renderedFifths;
    private _renderedDrums;
    private _renderedMod;
    private _renderedRhythm;
    private _renderedPitchChannelCount;
    private _renderedNoiseChannelCount;
    private _renderedModChannelCount;
    private _followPlayheadBar;
    constructor(_doc: SongDocument, _interactive: boolean, _barOffset: number);
    private _getMaxPitch;
    private _validateModDragLabelInput;
    private _getMaxDivision;
    private _getMinDivision;
    private _snapToMinDivision;
    private _updateCursorStatus;
    private _cursorIsInSelection;
    private _cursorAtStartOfSelection;
    private _cursorAtEndOfSelection;
    private _findMousePitch;
    private _snapToPitch;
    private _copyPins;
    movePlayheadToMouse(): boolean;
    resetCopiedPins: () => void;
    private _animatePlayhead;
    private _whenMouseOver;
    private _whenMouseOut;
    private _whenMousePressed;
    private _whenTouchPressed;
    setModSettingsForChange(change: any, songEditor: SongEditor): boolean;
    stopEditingModLabel(discardChanges: boolean): void;
    private _whenCursorPressed;
    private _whenMouseMoved;
    private _whenTouchMoved;
    private _whenCursorMoved;
    private _whenCursorReleased;
    private _setPatternSelection;
    private _updatePreview;
    private _updateSelection;
    render(): void;
    private _redrawNotePatterns;
    private _drawNote;
    private _pitchToPixelHeight;
}
